{"version":3,"sources":["components/Timer.js","components/Main.js","App.js","index.js"],"names":["TimerWrap","styled","div","ClockWrap","LoopIconWrap","InputWrap","Timer","useState","Date","toLocaleTimeString","currenttime","setCurrentTime","setInterval","time","setTime","condition","setCondition","inputtime","setInputTime","useEffect","timer","timeEnd","moment","timeStart","timeDifference","diff","utc","format","add","timeLeft","clearInterval","className","type","onChange","ev","target","value","onClick","Container","section","Main","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAoEA,I,EAAMA,EAAYC,IAAOC,IAAV,gDAITC,EAAYF,IAAOC,IAAV,yUAiBTE,EAAeH,IAAOC,IAAV,4QAcZG,EAAYJ,IAAOC,IAAV,qaAuBAI,EAvHf,WAAkB,IAAD,EAEuBC,oBAAS,IAAIC,MAAOC,sBAF3C,mBAERC,EAFQ,KAEKC,EAFL,KAGfC,aAAY,kBAAMD,GAAe,IAAIH,MAAOC,wBAAuB,KAEnE,IALe,EAaSF,mBAAS,YAblB,mBAaRM,EAbQ,KAaFC,EAbE,OAemBP,oBAAS,GAf5B,mBAeRQ,EAfQ,KAeGC,EAfH,OAiBmBT,mBAAS,IAjB5B,mBAiBRU,EAjBQ,KAiBGC,EAjBH,KAgCf,OAbAC,qBAAU,WACR,GAAIJ,GAAaE,GAAuB,aAATJ,EAAsB,CACnD,IAAMO,EAAQR,aAAY,WACxBE,EAjBS,SAACG,GACd,IAAII,EAAUC,IAAOL,EAAW,SAC5BM,EAAYD,MACZE,EAAiBF,IAAOD,EAAQI,KAAKF,IAAYG,MAAMC,OAAO,YAElE,OADIH,EAAiB,GAAGA,EAAeI,IAAI,GAAI,SACxCJ,EAYKK,CAASZ,MAChB,KACH,OAAO,kBAAMa,cAAcV,IAEhB,aAATP,IACFG,GAAa,GACbF,EAAQ,eAET,CAACC,EAAWF,IAGb,eAACb,EAAD,WACE,eAACG,EAAD,WACE,4BAAIU,IACJ,cAACT,EAAD,UAEKW,GAAaE,EAAa,cAAC,IAAD,CAAUc,UAAU,gBAAmB,cAAC,IAAD,CAAUA,UAAU,cAI5F,eAAC1B,EAAD,WACE,uBAAO2B,KAAK,OAAOC,SACjB,SAACC,GAAD,OAAQhB,EAAagB,EAAGC,OAAOC,UAGjC,wBAAQJ,KAAK,SAASK,QAAS,SAACH,GAC9BlB,GAAcD,GACdmB,EAAGC,OAAOJ,UAAUH,IAAI,QAF1B,SAKKb,EAAa,cAAC,IAAD,IAAgB,cAAC,IAAD,SAIpC,4GAAmBL,SClDzB,IAAM4B,EAAYrC,IAAOsC,QAAV,0PAUAC,EAnBf,WAEE,OACE,cAACF,EAAD,UACE,cAAC,EAAD,OCASG,MANf,WACE,OACE,cAAC,EAAD,KCCJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eb645890.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\n\r\nfunction Timer() {\r\n\r\n  const [currenttime, setCurrentTime] = useState(new Date().toLocaleTimeString())\r\n  setInterval(() => setCurrentTime(new Date().toLocaleTimeString()), 1000)\r\n\r\n  let timeLeft = (inputtime) => {\r\n    let timeEnd = moment(inputtime, 'HH:mm')\r\n    let timeStart = moment()\r\n    let timeDifference = moment(timeEnd.diff(timeStart)).utc().format('HH:mm:ss')\r\n    if (timeDifference < 0) timeDifference.add(24, 'hours')\r\n    return timeDifference\r\n  }\r\n\r\n  const [time, setTime] = useState('--:--:--')\r\n\r\n  const [condition, setCondition] = useState(false)\r\n\r\n  const [inputtime, setInputTime] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (condition && inputtime && (time !== \"00:00:00\")) {\r\n      const timer = setInterval(() => {\r\n        setTime(timeLeft(inputtime))\r\n      }, 1000)\r\n      return () => clearInterval(timer)\r\n    }\r\n    if (time === '00:00:00') {\r\n      setCondition(false)\r\n      setTime('TIME END')\r\n    }\r\n  }, [condition, time])\r\n\r\n  return (\r\n    <TimerWrap>\r\n      <ClockWrap>\r\n        <p>{time}</p>\r\n        <LoopIconWrap>\r\n          {\r\n            (condition && inputtime) ? <LoopIcon className=\"rotate loop\" /> : <LoopIcon className=\"loop\" />\r\n          }\r\n        </LoopIconWrap>\r\n      </ClockWrap>\r\n      <InputWrap>\r\n        <input type=\"time\" onChange={\r\n          (ev) => setInputTime(ev.target.value)\r\n        }></input>\r\n\r\n        <button type=\"submit\" onClick={(ev) => {\r\n          setCondition(!condition);\r\n          ev.target.className.add('red')\r\n        }}>\r\n          {\r\n            (condition) ? <PauseIcon /> : <PlayArrowIcon />\r\n          }\r\n        </button>\r\n      </InputWrap>\r\n      <p>Текущее время: {currenttime}</p>\r\n    </TimerWrap>\r\n  )\r\n}\r\n\r\nconst TimerWrap = styled.div`\r\n  grid-area:timer;\r\n`\r\n\r\nconst ClockWrap = styled.div`\r\n  grid-area:timer;\r\n  display: grid;\r\n  grid-template-columns: 3fr 1fr;\r\n  justify-items:center;\r\n  align-items:center;\r\n  border:3px solid black;\r\n  border-radius: 10px;\r\n  width:200px;\r\n  height:80px;\r\n  p {\r\n    display:block;\r\n    font-size:29px;\r\n    line-height: 80px;\r\n    margin:0 10px;\r\n  }\r\n`\r\nconst LoopIconWrap = styled.div`\r\n  .loop {\r\n    height:38px;\r\n    width:38px;\r\n    margin-top:10px;\r\n  }\r\n  .rotate {\r\n    animation: moving 3s infinite linear;\r\n    transform-origin: 50% 50% 0;\r\n    @keyframes moving {\r\n      100% {transform: rotate(-360deg);}\r\n    }\r\n}\r\n`\r\nconst InputWrap = styled.div`\r\n  display:grid;\r\n  grid-template-columns: 1fr 1.5fr;\r\n  grid-template-rows:40px;\r\n  grid-gap:20px;\r\n  justify-content:space-around;\r\n  align-items: center;\r\n  margin-top:10px;\r\n  button, input {\r\n    height:100%;\r\n    border:3px solid black;\r\n    border-radius: 10px;\r\n    outline:none;\r\n    cursor:pointer\r\n  }\r\n  input {\r\n    height:86%;\r\n  }\r\n  button {\r\n    background-color: green;\r\n  }\r\n`\r\n\r\nexport default Timer","import styled from 'styled-components';\r\n// import React from 'react';\r\nimport Timer from './Timer'\r\n\r\nfunction Main() {\r\n\r\n  return (\r\n    <Container>\r\n      <Timer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.section`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: 300px;\r\n    grid-auto-flow:column;\r\n    align-items: center;\r\n    justify-items:center;\r\n    grid-template-areas: \". timer timer .\";\r\n`\r\n\r\nexport default Main\r\n","import Main from './components/Main'\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}